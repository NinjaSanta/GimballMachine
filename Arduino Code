
#include <Wire.h>
#include <Convert.h>
const int MPU = 0x68; // MPU6050 I2C address
float AccRawX, AccRawY, AccRawZ;
float GyroRawX, GyroRawY, GyroRawZ;
float AccAngleX, AccAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;
float X_Value, Y_Value, Z_Value;
float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
float timeDiff, currentTime, previousTime;
int c = 0;
int cs = 0;
int reset = 0;
int temp;
String X_Int, Y_Int, Z_Int;
String SizeX, SizeY, SizeZ;
int x0, x1, x2, x3, x4, x5, x6;
int y0, y1, y2, y3, y4, y5, y6;
int z0, z1, z2, z3, z4, z5, z6;
bool deneme;

#define xp0 2
#define xp3 3
#define xp4 4
#define xp5 5 
#define xp6 6

#define yp0 7
#define yp3 8 
#define yp4 9 
#define yp5 10
#define yp6 11

#define zp0 12 
#define zp3 13
#define zp4 A0
#define zp5 A1
#define zp6 A2

/*
#define s0 9
#define s1 10
#define s2 11
#define se 3
*/

Convert convert;


void setup() {
  Serial.begin(19200);
pinMode(xp0, OUTPUT);
pinMode(xp3, OUTPUT);
pinMode(xp4, OUTPUT);
pinMode(xp5, OUTPUT);
pinMode(xp6, OUTPUT);
pinMode(yp0, OUTPUT);
pinMode(yp3, OUTPUT);
pinMode(yp4, OUTPUT);
pinMode(yp5, OUTPUT);
pinMode(yp6, OUTPUT);
pinMode(zp0, OUTPUT);
pinMode(zp3, OUTPUT);
pinMode(zp4, OUTPUT);
pinMode(zp5, OUTPUT);
pinMode(zp6, OUTPUT);


//  pinMode(s0, OUTPUT);
//  pinMode(s1, OUTPUT);
//  pinMode(s2, OUTPUT);
//  pinMode(se, OUTPUT);
  Wire.begin();                      // Initialize comunication
  Wire.beginTransmission(MPU);       // Start communication with MPU6050 // MPU=0x68
  Wire.write(0x6B);                  // Talk to the register 6B
  Wire.write(0x00);                  // Make reset - place a 0 into the 6B register
  Wire.endTransmission(true);        //end the transmission

  calculate_IMU_error();
  delay(20);
}



void loop() {
  

//Accelerometer data reading

  Wire.beginTransmission(MPU);
  Wire.write(0x3B); // Start with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
  //For a range of +-2g, we need to divide the raw values by 16384, according to the datasheet
  AccRawX = (Wire.read() << 8 | Wire.read()) / 16384.0; // X-axis value
  AccRawY = (Wire.read() << 8 | Wire.read()) / 16384.0; // Y-axis value
  AccRawZ = (Wire.read() << 8 | Wire.read()) / 16384.0; // Z-axis value

  
  // calculating the x and y axis position from accelerometer data
  
  AccAngleX = (atan(AccRawY / sqrt(pow(AccRawX, 2) + pow(AccRawZ, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
  AccAngleY = (atan(-1 * AccRawX / sqrt(pow(AccRawY, 2) + pow(AccRawZ, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)

  
  //gyroscope data reading
  
  previousTime = currentTime;        
  currentTime = millis();            
  timeDiff = (currentTime - previousTime) / 1000; // convert to get seconds
  Wire.beginTransmission(MPU);
  Wire.write(0x43);  // Gyro data register
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true); // reading from 6 registers as data is stored in 2 registers each
  GyroRawX = (Wire.read() << 8 | Wire.read()) / 131.0; 
  GyroRawY = (Wire.read() << 8 | Wire.read()) / 131.0;
  GyroRawZ = (Wire.read() << 8 | Wire.read()) / 131.0;

  
  // Correcting the data with the errors
  GyroRawX = GyroRawX + 0.56; // GyroErrorX ~(-0.56)
  GyroRawY = GyroRawY - 2; // GyroErrorY ~(2)
  GyroRawZ = GyroRawZ + 0.79; // GyroErrorZ ~ (-0.8)

  
  // converting from degrees per second to degrees
  
  gyroAngleX = gyroAngleX + GyroRawX * timeDiff; // deg/s * s = deg
  gyroAngleY = gyroAngleY + GyroRawY * timeDiff;
  //gyroAngleZ = gyroAngleZ + GyroRawZ * timeDiff;
  Z_Value =  Z_Value + GyroRawZ * timeDiff;
  // Complementary filter - combine acceleromter and gyro angle values
  gyroAngleX = 0.96 * gyroAngleX + 0.04 * AccAngleX;
  gyroAngleY = 0.96 * gyroAngleY + 0.04 * AccAngleY;

X_Value = int(gyroAngleX);
Y_Value = int(gyroAngleY);



 // Print the values on the serial monitor
  Serial.print(X_Value);
  Serial.print("/");
  Serial.print(Y_Value);

  Serial.print("/");
  Serial.println(Z_Value);


if (X_Value < 0) {
  digitalWrite(xp0, HIGH);
  X_Value = abs(X_Value);
  
} else {
  digitalWrite(xp0, LOW);
}

if (Y_Value < 0) {
  digitalWrite(yp0, HIGH);
  Y_Value = abs(Y_Value);
} else {
  digitalWrite(yp0, LOW);
}

if (Z_Value < 0) {
  digitalWrite(zp0, HIGH);
  Z_Value = abs(Z_Value);
} else {
  digitalWrite(zp0, LOW);
}








if (X_Value<6) {
  digitalWrite(xp3, LOW);
  digitalWrite(xp4, LOW);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, LOW);
}else if (X_Value<12 ) {
  digitalWrite(xp3, HIGH);
  digitalWrite(xp4, LOW);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, LOW);
}else if (X_Value<18) {
  digitalWrite(xp3, LOW);
  digitalWrite(xp4, HIGH);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, LOW);
}else if (X_Value<24) {
  digitalWrite(xp3, HIGH);
  digitalWrite(xp4, HIGH);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, LOW);
}else if (X_Value<30) {
  digitalWrite(xp3, LOW);
  digitalWrite(xp4, LOW);
  digitalWrite(xp5, HIGH);
  digitalWrite(xp6, LOW);
}else if (X_Value<36) {
  digitalWrite(xp3, HIGH);
  digitalWrite(xp4, LOW);
  digitalWrite(xp5, HIGH);
  digitalWrite(xp6, LOW);
}else if (X_Value<42) {
  digitalWrite(xp3, LOW);
  digitalWrite(xp4, HIGH);
  digitalWrite(xp5, HIGH);
  digitalWrite(xp6, LOW);
}else if (X_Value<48) {
  digitalWrite(xp3, HIGH);
  digitalWrite(xp4, HIGH);
  digitalWrite(xp5, HIGH);
  digitalWrite(xp6, LOW);
}else if (X_Value<54) {
  digitalWrite(xp3, LOW);
  digitalWrite(xp4, LOW);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, HIGH);
}else if (X_Value<60) {
  digitalWrite(xp3, HIGH);
  digitalWrite(xp4, LOW);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, HIGH);
}else if (X_Value<66) {
  digitalWrite(xp3, LOW);
  digitalWrite(xp4, HIGH);
  digitalWrite(xp5, LOW);
  digitalWrite(xp6, HIGH);
}






if (Y_Value<6) {
  digitalWrite(yp3, LOW);
  digitalWrite(yp4, LOW);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, LOW);
}else if (Y_Value<12 ) {
  digitalWrite(yp3, HIGH);
  digitalWrite(yp4, LOW);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, LOW);
}else if (Y_Value<18) {
  digitalWrite(yp3, LOW);
  digitalWrite(yp4, HIGH);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, LOW);
}else if (Y_Value<24) {
  digitalWrite(yp3, HIGH);
  digitalWrite(yp4, HIGH);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, LOW);
}else if (Y_Value<30) {
  digitalWrite(yp3, LOW);
  digitalWrite(yp4, LOW);
  digitalWrite(yp5, HIGH);
  digitalWrite(yp6, LOW);
}else if (Y_Value<36) {
  digitalWrite(yp3, HIGH);
  digitalWrite(yp4, LOW);
  digitalWrite(yp5, HIGH);
  digitalWrite(yp6, LOW);
}else if (Y_Value<42) {
  digitalWrite(yp3, LOW);
  digitalWrite(yp4, HIGH);
  digitalWrite(yp5, HIGH);
  digitalWrite(yp6, LOW);
}else if (Y_Value<48) {
  digitalWrite(yp3, HIGH);
  digitalWrite(yp4, HIGH);
  digitalWrite(yp5, HIGH);
  digitalWrite(yp6, LOW);
}else if (Y_Value<54) {
  digitalWrite(yp3, LOW);
  digitalWrite(yp4, LOW);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, HIGH);
}else if (Y_Value<60) {
  digitalWrite(yp3, HIGH);
  digitalWrite(yp4, LOW);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, HIGH);
}else if (Y_Value<66) {
  digitalWrite(yp3, LOW);
  digitalWrite(yp4, HIGH);
  digitalWrite(yp5, LOW);
  digitalWrite(yp6, HIGH);
}





if (Z_Value<6) {
  digitalWrite(zp3, LOW);
  digitalWrite(zp4, LOW);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, LOW);
}else if (Z_Value<12 ) {
  digitalWrite(zp3, HIGH);
  digitalWrite(zp4, LOW);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, LOW);
}else if (Z_Value<18) {
  digitalWrite(zp3, LOW);
  digitalWrite(zp4, HIGH);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, LOW);
}else if (Z_Value<24) {
  digitalWrite(zp3, HIGH);
  digitalWrite(zp4, HIGH);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, LOW);
}else if (Z_Value<30) {
  digitalWrite(zp3, LOW);
  digitalWrite(zp4, LOW);
  digitalWrite(zp5, HIGH);
  digitalWrite(zp6, LOW);
}else if (Z_Value<36) {
  digitalWrite(zp3, HIGH);
  digitalWrite(zp4, LOW);
  digitalWrite(zp5, HIGH);
  digitalWrite(zp6, LOW);
}else if (Z_Value<42) {
  digitalWrite(zp3, LOW);
  digitalWrite(zp4, HIGH);
  digitalWrite(zp5, HIGH);
  digitalWrite(zp6, LOW);
}else if (Z_Value<48) {
  digitalWrite(zp3, HIGH);
  digitalWrite(zp4, HIGH);
  digitalWrite(zp5, HIGH);
  digitalWrite(zp6, LOW);
}else if (Z_Value<54) {
  digitalWrite(zp3, LOW);
  digitalWrite(zp4, LOW);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, HIGH);
}else if (Z_Value<60) {
  digitalWrite(zp3, HIGH);
  digitalWrite(zp4, LOW);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, HIGH);
}else if (Z_Value<66) {
  digitalWrite(zp3, LOW);
  digitalWrite(zp4, HIGH);
  digitalWrite(zp5, LOW);
  digitalWrite(zp6, HIGH);
}





Serial.println(X_Int +" "+  Y_Int + " "+ Z_Int);



}



void calculate_IMU_error() {

 // 200 reading for error calculation
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x3B);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    AccRawX = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    AccRawY = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    AccRawZ = (Wire.read() << 8 | Wire.read()) / 16384.0 ;
    // Sum all readings
    AccErrorX = AccErrorX + ((atan((AccRawY) / sqrt(pow((AccRawX), 2) + pow((AccRawZ), 2))) * 180 / PI));
    AccErrorY = AccErrorY + ((atan(-1 * (AccRawX) / sqrt(pow((AccRawY), 2) + pow((AccRawZ), 2))) * 180 / PI));
    c++;
  }
  AccErrorX = AccErrorX / 200;
  AccErrorY = AccErrorY / 200;

  
  c = 0;
  while (c < 200) {
    Wire.beginTransmission(MPU);
    Wire.write(0x43);
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 6, true);
    GyroRawX = Wire.read() << 8 | Wire.read();
    GyroRawY = Wire.read() << 8 | Wire.read();
    GyroRawZ = Wire.read() << 8 | Wire.read();
    
    GyroErrorX = GyroErrorX + (GyroRawX / 131.0);
    GyroErrorY = GyroErrorY + (GyroRawY / 131.0);
    GyroErrorZ = GyroErrorZ + (GyroRawZ / 131.0);
    c++;
  }
  
  GyroErrorX = GyroErrorX / 200;
  GyroErrorY = GyroErrorY / 200;
  GyroErrorZ = GyroErrorZ / 200;

  
  // Print the error values on the Serial Monitor
  Serial.print("AccErrorX: ");
  Serial.println(AccErrorX);
  Serial.print("AccErrorY: ");
  Serial.println(AccErrorY);
  Serial.print("GyroErrorX: ");
  Serial.println(GyroErrorX);
  Serial.print("GyroErrorY: ");
  Serial.println(GyroErrorY);
  Serial.print("GyroErrorZ: ");
  Serial.println(GyroErrorZ);
}
